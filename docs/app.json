[{"name":"app.R","content":"\nlibrary(shiny)\nlibrary(ggplot2)\n# And imports...\n\n# library(digest)\n# library(glue)\n# library(lifecycle)\n# library(withr)\n# library(grid)\n# library(grDevices)\n# library(stats)\n\nlibrary(dplyr)\nlibrary(zoo)\n\nif (FALSE) {\n  library(ggplot2); library(digest); library(glue); library(gtable); library(isoband)\n  library(lifecycle); library(MASS); library(mgcv); library(rlang); library(scales)\n  library(tibble); library(vctrs); library(withr)\n}\n\n# \nage_calc2 = function(dob, dot){\n  \n  dob_day = as.numeric(strftime(dob, \"%d\"))\n  dob_month = as.numeric(strftime(dob, \"%m\"))\n  dob_year = as.numeric(strftime(dob, \"%Y\"))\n  \n  dot_day = as.numeric(strftime(dot, \"%d\"))\n  dot_month = as.numeric(strftime(dot, \"%m\"))\n  dot_year = as.numeric(strftime(dot, \"%Y\"))\n  \n  years_diff = dot_year - dob_year\n  months_diff = dot_month - dob_month\n  days_diff = dot_day - dob_day\n  \n  total_months_diff = (years_diff*12) + (months_diff) + (days_diff/31)\n  \n  return(total_months_diff)\n}\n\nshinyApp(\n  \n  ui <- fluidPage(#theme = \"flatly.css\",\n    \n    # Instructions page ----\n    navbarPage(\"MiMo\",\n               \n               \n               # Extra... nav bar ----\n               tabPanel(\"ðŸ“Œ Norms\",\n                        \n                        \n                        sidebarPanel(\n                          selectInput(inputId = \"collection3\",\n                                      label = \"Collection\",\n                                      choices = c(\"PLEASE CHOOSE...\",\n                                                  \"Eng-NA\", \"Eng-UK\", \"KIDEVAL\",\n                                                  \"Spanish\", \"French\", \"German\", \"Japanese\", \"EastAsian\",\n                                                  \"Clinical-MOR\", \"Biling\"),\n                                      selected = NULL\n                          ),\n                          \n                          selectInput(inputId = \"variable3\",\n                                      label = \"Variable\",\n                                      choices =  c(\n                                        \"MLU in morphemes\" = \"mlu_m\",\n                                        \"MLU in words\" = \"mlu_w\",\n                                        \"HDD\" = \"hdd\",\n                                        \"TTR\" = \"ttr\"),\n                                      selected = \"mlu_m\"\n                          ),\n                          \n                          numericInput(inputId = \"num_utts3\",\n                                       label = \"Min. utterances\",\n                                       value = 100\n                          ),\n                          \n                          numericInput(inputId = \"bin_width3\",\n                                       label = \"Bin width\",\n                                       value = 10\n                          ),\n                          \n                          sliderInput(inputId = \"shading3\",\n                                      label = \"Shading\",\n                                      min = 0,\n                                      max = 0.3,\n                                      value = 0.1\n                          ),\n                          \n                          sliderInput(inputId = \"trim_data3\",\n                                      label = \"Trim data?\",\n                                      min = 0,\n                                      max = 100,\n                                      value = c(1,100)\n                          ),\n                          \n                          hr(),\n                          \n                          h3(\"Show speaker\"),\n                          textInput(inputId = \"child_name\",\n                                    label = \"Name of Child\",\n                                    placeholder = \"Child Name\"),\n                          # Copy the line below to make a date selector\n                          textInput(inputId = \"value\",\n                                    label = \"Value for MLU/HDD etc\",\n                                    placeholder = \"Value\"),\n                          dateInput(\"dob3\", label = h4(\"Date of Birth\")),\n                          dateInput(\"dot3\", label = h4(\"Date of Test\")),\n                          htmlOutput(\"age\")\n                        ), # sidebarpanel\n                        \n                        mainPanel(\n                          h3(\"Figure will take a few seconds to appear/refresh...\"),\n                          plotOutput(\"DIY_plot\",\n                                     dblclick = \"plot_dblclick3\",\n                                     brush = brushOpts(\n                                       id = \"plot_brush3\",\n                                       resetOnNew = TRUE\n                                     ))\n                        )\n                        \n               ) # end of navbar menu\n               \n    ) # end of nav bar page\n  ),\n  \n  \n  # server statement----\n  server <- function(input, output, session){\n    \n    \n    # df_childes_DIY ----\n    \n    df_childes_DIY <- reactive({\n      \n      if(input$collection3 == \"PLEASE CHOOSE...\")return(NULL)\n      \n      if(input$collection3 == \"KIDEVAL\"){\n        \n        kideval_corpora_id <- c(65, #Bates\n                                60, #Bernstein\n                                71, #Bliss\n                                76, #Bloom70\n                                41, #Bloom73\n                                73, #Braunwald\n                                36, #Brown\n                                29, #Clark\n                                39, #Demetras1\n                                46, #Demetras2\n                                50, #Feldman\n                                43, #Gathercole\n                                64, #Gleason\n                                57, #Hall\n                                31, #Higginson\n                                48, #HSLLD\n                                54, #MacWhinney\n                                47, #McCune\n                                30, #NewEngland\n                                63, #Post\n                                49, #Providence\n                                55, #Sachs\n                                61, #Snow\n                                67, #Supes\n                                66, #Tardif\n                                62, #Valian\n                                52, #VanHouten\n                                32, #VanKleeck\n                                56, #Warren\n                                69) #Weist\n        \n        \n        data_url <- \"https://raw.githubusercontent.com/nickriches/CHILDES_speaker_statistics/refs/heads/main/speaker_statistics.csv\"\n        data_path <- \"speaker_statistics.csv\"\n        download.file(data_url, data_path)\n        df <- read.csv(data_path)\n        \n        \n        df <- df[which(df$corpus_id %in% kideval_corpora_id), ]\n        \n      }\n      \n      if(input$collection3 != \"KIDEVAL\"){\n        \n        data_url <- \"https://raw.githubusercontent.com/nickriches/CHILDES_speaker_statistics/refs/heads/main/speaker_statistics.csv\"\n        data_path <- \"speaker_statistics.csv\"\n        download.file(data_url, data_path)\n        df <- read.csv(data_path)\n        \n        df %>% filter(collection_name == input$collection3) -> df\n        \n      }\n      \n      df <- as.data.frame(df)\n      \n      df %>% filter(num_utterances >= input$num_utts3) -> df\n      \n      df %>% arrange(target_child_age) %>% filter(is.na(target_child_age) == FALSE) -> df\n      \n      age_range <- max(df$target_child_age) - min(df$target_child_age)\n      \n      upper_age_bound <- min(df$target_child_age) + age_range*(input$trim_data3[2]/100)\n      lower_age_bound <- min(df$target_child_age) + age_range*(input$trim_data3[1]/100)\n      \n      df %>%\n        filter(target_child_age >= lower_age_bound) %>%\n        filter(target_child_age <= upper_age_bound) ->\n        df\n      \n      \n      if(input$variable3 == \"mlu_m\"){\n        df$dv <- df$mlu_m\n      }\n      \n      if(input$variable3 == \"mlu_w\"){\n        df$dv <- df$mlu_w\n      }\n      \n      if(input$variable3 == \"hdd\"){\n        df$hdd <- df$hdd*42 # to obtain ACTUAL HDD\n        df$dv <- df$hdd\n      }\n      \n      if(input$variable3 == \"ttr\"){\n        df$ttr <- df$num_types/df$num_tokens\n        df$dv <- df$ttr\n      }\n      \n      df %>% filter(dv != 0) -> df\n      \n      df %>% filter(is.na(dv) == FALSE) -> df\n      df$mean <- rollapply(df$dv, mean, width = input$bin_width3, partial = TRUE)\n      df$sd <- rollapply(df$dv, sd, width = input$bin_width3, partial = TRUE)\n      df$plus_one <- df$mean + df$sd\n      df$plus_one_point_five <- df$mean + 1.5*df$sd\n      df$minus_one <- df$mean - df$sd\n      df$minus_one_point_five <- df$mean - 1.5*df$sd\n      \n      return(df) \n      \n    })\n    \n    \n    # xmax_hdd (obtain highest value on x axis)----\n    xmax_DIY <- reactive({\n      return(max(df_childes_DIY()$target_child_age, na.rm = TRUE))\n    })\n    \n    \n    # Speaker_age----\n    speaker_age <- reactive({\n      age <- age_calc2(input$dob3, input$dot3)\n      return(age)\n    })\n    \n    \n    # ranges and observeEvent for interactive plots ----\n    \n    ranges <- reactiveValues(x = NULL, y = NULL)\n    \n    \n    observeEvent(input$plot_dblclick3, {\n      brush <- input$plot_brush3\n      if (!is.null(brush)) {\n        ranges$x <- c(brush$xmin, brush$xmax)\n        ranges$y <- c(brush$ymin, brush$ymax)\n        \n      } else {\n        ranges$x <- NULL\n        ranges$y <- NULL\n      }\n    })\n    \n    \n    # DIY_plot -----\n    output$DIY_plot <- renderPlot({\n      \n      req(df_childes_DIY())\n      \n      m2ym <- function(age_m){\n        year <- floor(age_m/12)\n        month <- floor(age_m - (year*12))\n        return(paste0(year, \";\", month))\n      }\n      \n      breakpoints <- function(min,max){\n        seq <- seq(min, max, 1)\n        seq <- unique(floor(seq/3))\n        seq <- seq*3\n        return(seq)\n      }\n      \n      g <- ggplot()\n      \n      g <- g + theme_bw()\n      \n      g <- g + coord_cartesian(xlim = ranges$x, ylim = ranges$y, expand = FALSE)\n      \n      g <- g + geom_point(data = df_childes_DIY(), alpha = input$shading3, aes(x = target_child_age, y = dv, size = num_utterances))\n      \n      g <- g + geom_smooth(data = df_childes_DIY(), aes(x = target_child_age, y = mean), linetype = \"solid\", lwd = 1, se = FALSE, method = \"loess\")\n      g <- g + geom_smooth(data = df_childes_DIY(), aes(x = target_child_age, y = plus_one), linetype = \"dashed\", lwd = 1, se = FALSE, method = \"loess\")\n      g <- g + geom_smooth(data = df_childes_DIY(), aes(x = target_child_age, y = plus_one_point_five), linetype = \"dotted\", lwd = 1, se = FALSE, method = \"loess\")\n      g <- g + geom_smooth(data = df_childes_DIY(), aes(x = target_child_age, y = minus_one), linetype = \"dashed\", lwd = 1, se = FALSE, method = \"loess\")\n      g <- g + geom_smooth(data = df_childes_DIY(), aes(x = target_child_age, y = minus_one_point_five), linetype = \"dotted\", lwd = 1, se = FALSE, method = \"loess\")\n      \n      mean_model <- loess(mean ~ target_child_age, data = df_childes_DIY())\n      plus_one_model <- loess(plus_one ~ target_child_age, data = df_childes_DIY())\n      minus_one_model <- loess(minus_one ~ target_child_age, data = df_childes_DIY())\n      \n      g <- g + theme(axis.text.x  = element_text(angle=90, vjust=0.5))\n      \n      g <- g + scale_x_continuous(breaks = breakpoints(0, xmax_DIY()),         # use these breaks...\n                                  labels = m2ym(breakpoints(0, xmax_DIY()))    # ...with these labels\n      ) \n      \n      dv_name <- case_when(input$variable3 == \"mlu_m\" ~ \"MLU in morphemes\",\n                           input$variable3 == \"mlu_w\" ~ \"MLU in words\",\n                           input$variable3 == \"ttr\" ~ \"Type Token Ratio\",\n                           input$variable3 == \"hdd\" ~ \"HDD\")\n      \n      g <- g + labs(title = paste(dv_name, \"for CHILDES collection\", input$collection3),\n                    x = \"Age (Months;Years)\", y = dv_name)\n      \n      # Activate this routine if speaker has been selected, and mlum has been chosen as input$variable\n      \n      \n      g_subtitle <- \"Blue lines show mean, 1 st.dev, and 1.5 st.dev\"\n      \n      if(input$child_name != \"\" &\n         input$value != \"\" &\n         is.na(predict(mean_model, speaker_age())) == FALSE)\n        \n      {\n        \n        mean_for_speaker_age <- predict(mean_model, speaker_age())\n        sd_for_speaker_age <- predict(plus_one_model, speaker_age()) - mean_for_speaker_age\n        z_score <- round((as.numeric(input$value) - mean_for_speaker_age)/sd_for_speaker_age, 2)\n        perc <- round(pnorm(z_score)*100,0)\n        g <- g + geom_point(data = df_childes_DIY(), aes(x = speaker_age(), y = as.numeric(input$value), pch = 9, size = 500, colour = \"red\")) + scale_shape_identity()\n        zp_label <- paste0(\"z = \", as.character(z_score), \", perc =\", perc)\n        g_subtitle <- paste0(g_subtitle, \"\\nMarker shows participant \", input$child_name, \",\", zp_label)\n      }\n      \n      g <- g + labs(subtitle = g_subtitle)\n      \n      g\n      \n    }) # end of output$all plot <- renderPlot...\n    \n    output$age = renderUI({\n      \n      m2ym <- function(age_m){\n        year <- floor(age_m/12)\n        month <- floor(age_m - (year*12))\n        return(paste0(year, \";\", month))\n      }\n      \n      age <- paste(\"Age = \", as.character(m2ym(speaker_age())))\n      \n    })\n    \n  }\n  \n)\n\nshinyApp(ui = ui, server = server)\n\n\n\n","type":"text"},{"name":"MiMo - WebR - Norms - Export.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"},{"name":"streamlining_app.R","content":"\nremotes::install_version(\"pillar\", version = \"1.10.2\")\nremotes::install_version(\"tibble\", version = \"3.2.1\")\nremotes::install_version(\"scales\", version = \"1.3.0\")\n\n# NB to serve on a different port\n\nshinylive::export(appdir = \".\", destdir = \"docs\")\nhttpuv::stopAllServers()\nhttpuv::runStaticServer(\"docs\", port = 8001)\n\n\ngetwd()\nunlink(\"docs\", recursive = TRUE)\n\ninstall.packages(c(\"ggplot2\", \"digest\", \"glue\", \"gtable\", \"isoband\", \"lifecycle\", \"MASS\", \"mgcv\", \"rlang\", \"scales\", \"tibble\", \"vctrs\", \"withr\"))","type":"text"}]
